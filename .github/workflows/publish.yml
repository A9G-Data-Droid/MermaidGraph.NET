# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: publish
on:
  workflow_dispatch: # Allow running the workflow manually from the GitHub UI
  push:
    branches:        # This action will run on PR to these branches
      - main
      - next
  pull_request:
    branches:
      - '*'          # Run the workflow for all pull requests
  release:
    types:
      - published    # Run the workflow when a new GitHub release is published

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{github.workspace}}/nuget

defaults:
  run:
    shell: pwsh

jobs:
  pack:
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Get all history to allow automatic versioning using MinVer

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Restore dependencies
      run: dotnet restore   

    - name: Build
      run: dotnet build --configuration Release --no-restore
    
    - name: Execute unit tests
      run: dotnet test --configuration Release -p:CollectCoverage=true -p:CoverletOutput=TestResults/ -p:CoverletOutputFormat=opencover --no-build --verbosity normal

    - name: Create Test Coverage Badge
      uses: simon-k/dotnet-code-coverage-badge@v1.0.0
      id: create_coverage_badge
      with:
        label: Unit Test Coverage
        color: brightgreen
        path: mermaid-graphTests/TestResults/coverage.opencover.xml
        gist-filename: MermaidGraph.NET.code-coverage.json
        gist-id: 24afd0c237dc4c9b56453dce09b24687
        gist-auth-token: ${{ secrets.GIST_AUTH_TOKEN }}       

    - name: Print code coverage
      run: echo "Code coverage percentage ${{steps.create_coverage_badge.outputs.percentage}}%"

    # Create the NuGet package in the folder from the environment variable NuGetDirectory
    - run: dotnet pack --configuration Release --no-build --output ${{env.NuGetDirectory}}

    # Publish the NuGet package as an artifact, so they can be used in following jobs
    - uses: actions/upload-artifact@v3
      with:
        name: nuget
        if-no-files-found: error
        retention-days: 7
        path: ${{env.NuGetDirectory}}/*.nupkg

  # deploy:
  #   # Publish only when creating a GitHub Release
  #   # https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository
  #   # You can update this logic if you want to manage releases differently
  #   if: github.event_name == 'release'
  #   runs-on: windows-latest
  #   needs: [ pack ]
  #   steps:
  #     # Download the NuGet package created in the previous job
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: nuget
  #         path: ${{env.NuGetDirectory}}

  #     # Install the .NET SDK indicated in the global.json file
  #     - name: Setup .NET Core
  #       uses: actions/setup-dotnet@v4

  #     # Publish all NuGet packages to NuGet.org
  #     # Use --skip-duplicate to prevent errors if a package with the same version already exists.
  #     # If you retry a failed workflow, already published packages will be skipped without error.
  #     - name: Publish NuGet package
  #       run: |
  #         foreach($file in (Get-ChildItem "${{env.NuGetDirectory}}" -Recurse -Include *.nupkg)) {
  #             dotnet nuget push $file --api-key "${{secrets.NUGET_APIKEY}}" --source https://api.nuget.org/v3/index.json --skip-duplicate
  #         }